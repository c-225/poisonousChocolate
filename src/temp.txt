import * as THREE from 'three';
import { OrbitControls } from 'three/addons/controls/OrbitControls.js';
import { Wireframe } from 'three/examples/jsm/Addons.js';
import { color } from 'three/tsl';

// Create the scene
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
const controls = new OrbitControls(camera, renderer.domElement);

controls.enableDamping = true; // Smooth rotation
controls.dampingFactor = 0.05;
controls.screenSpacePanning = false;
controls.maxPolarAngle = Math.PI; // Prevent flipping

renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const trap_vertices = [
    // Bottom face (wider)
    -3, -0.85, -3,  // 0 - Bottom-left
     3, -0.85, -3,  // 1 - Bottom-right
     3, -0.85,  3,  // 2 - Bottom-right front
    -3, -0.85,  3,  // 3 - Bottom-left front

    // middle "face" (wider)
    -3, 0.85, -3,  // 4 - Bottom-left
     3, 0.85, -3,  // 5 - Bottom-right
     3, 0.85,  3,  // 6 - Bottom-right front
    -3, 0.85,  3,  // 7 - Bottom-left front

    // Top face (narrower)
    -1, 2, -1,  // 8 - Top-left
     1, 2, -1,  // 9 - Top-right
     1, 2,  1,  // 10 - Top-right front
    -1, 2,  1   // 11 - Top-left front   
];

const quad_indices = [
    // Bottom face
    0, 1, 2,
    0, 2, 3,

    // Top face
    8, 9, 10,
    8, 10, 11,

    // Sides
    0, 1, 5,
    0, 5, 4,

    1, 2, 6,
    1, 6, 5,

    2, 3, 7,
    2, 7, 6,

    3, 0, 4,
    3, 4, 7,

    4, 5, 9,
    4, 9, 8,

    5, 6, 10,
    5, 10, 9,

    6, 7, 11,
    6, 11, 10,

    7, 4, 8,
    7, 8, 11,
];

const trapzeoid = new THREE.PolyhedronGeometry(trap_vertices, quad_indices, 1.44, 0);
const material = new THREE.MeshBasicMaterial({ color:0x572005 , side: THREE.DoubleSide,})
const lines = new THREE.MeshBasicMaterial({ color: 0xFFFFFF , wireframe:true})
const trap = new THREE.Mesh(trapzeoid, material);
trap.scale.set(1.5, 1, 1); // to make it more like a chocolate bar
scene.add(trap);

let nb_carre = 42;  

let instanceCount = 0;
let dummy = new THREE.Object3D();
let GRID_WIDTH = 7;
let GRID_HEIGHT = 6;
let CELL_SIZE = 1.5; // Size of each cell

const cellGeometry = new THREE.BoxGeometry(CELL_SIZE - 0.1, CELL_SIZE - 0.1, 0.5);
let instancedMesh = new THREE.InstancedMesh(cellGeometry, material, nb_carre);

    for (let y = 0; y < GRID_HEIGHT; y++) {
        for (let x = 0; x < GRID_WIDTH; x++) {
            // Center the grid around (0,0)
            dummy.position.set(
                x * CELL_SIZE - (GRID_WIDTH * CELL_SIZE) / 2 + CELL_SIZE / 2,
                y * CELL_SIZE - (GRID_HEIGHT * CELL_SIZE) / 2 + CELL_SIZE / 2,
                0
            );
            dummy.scale.set(0, 0, 0); // Initially hide all cells
            dummy.updateMatrix();
            instancedMesh.setMatrixAt(instanceCount++, dummy.matrix);
        }
    }
    scene.add(instancedMesh);


// Set camera position
camera.position.z = 5;

// Animation loop
function animate() {
    requestAnimationFrame(animate);
    controls.update();
    renderer.render(scene, camera);
}
animate();
